Index: data_manager.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'''\nThis is the layer between the server and the data.\nFunctions here are called from server.py\nand use generic functions from connection.py.\n'''\nfrom datetime import datetime\nimport database_common\n\n\ndef sort_data(data, order_by, order_direction):\n    if order_direction == \"Ascending\":\n        reverse_for_sort = False\n    elif order_direction == \"Descending\":\n        reverse_for_sort = True\n    elif order_direction == None:\n        reverse_for_sort = False\n\n    if order_by == \"Number of Votes\":\n        data.sort(key=lambda x: int(x[\"vote_number\"]), reverse=reverse_for_sort)\n    elif order_by == \"Chronology\" or order_by == 'Submission time':\n        data.sort(key=lambda x: datetime.strptime(x['submission_time'], '%Y-%m-%d %H:%M'), reverse=reverse_for_sort)\n    elif order_by == \"Answer length\":\n        data.sort(key=lambda x: len(x[\"message\"]), reverse=reverse_for_sort)\n    elif order_by == 'Title':\n        data.sort(key=lambda x: x[\"title\"], reverse=reverse_for_sort)\n    elif order_by == 'Message':\n        data.sort(key=lambda x: x[\"message\"], reverse=reverse_for_sort)\n    elif order_by == 'Number of Views':\n        data.sort(key=lambda x: x[\"view_number\"], reverse=reverse_for_sort)\n    elif order_by == None:\n        data.sort(key=lambda x: int(x[\"vote_number\"]), reverse=True)\n    return data\n\n\n@database_common.connection_handler\ndef get_question_bd(cursor):\n    cursor.execute(\"\"\"\n        SELECT *\n        FROM question\n        \"\"\")\n    return cursor.fetchall()\n\n\n@database_common.connection_handler\ndef get_question_by_id_bd(cursor, question_id):\n    cursor.execute(f\"\"\"\n        SELECT *\n        FROM question\n        WHERE id = '{question_id}'\n        \"\"\")\n    return cursor.fetchall()\n\n\n@database_common.connection_handler\ndef update_question_by_id_bd(cursor, question_id):\n    cursor.execute(f\"\"\"\n                        UPDATE question\n                        SET view_number = view_number + 1\n                        WHERE id = '{question_id}';\n                        \"\"\")\n\n\n@database_common.connection_handler\ndef update_answer_by_vote_bd(cursor, id, add):\n    cursor.execute(f\"\"\"\n                        UPDATE answer\n                        SET vote_number = vote_number + {add}\n                        WHERE id = '{id}';\n                        \"\"\")\n\n\n@database_common.connection_handler\ndef update_question_by_vote_bd(cursor, id, add):\n    cursor.execute(f\"\"\"\n                        UPDATE question\n                        SET vote_number = vote_number + {add}\n                        WHERE id = '{id}';\n                        \"\"\")\n\n\n@database_common.connection_handler\ndef get_answer_by_question_id_bd(cursor, question_id):\n    cursor.execute(f\"\"\"\n                            SELECT  id, submission_time, vote_number, question_id, message, image\n                            FROM answer\n                            WHERE question_id = '{question_id}'\n                            \"\"\")\n    return cursor.fetchall()\n\n\n@database_common.connection_handler\ndef max_id_answer_bd(cursor):\n    cursor.execute(\"\"\"SELECT MAX(id) FROM answer\"\"\")\n    return cursor.fetchall()\n\n\n@database_common.connection_handler\ndef adding_new_answer_bd(cursor, question_id, message, image):\n    current_id = max_id_answer_bd()[0]['max'] + 1\n    current_time = datetime.now()\n    cursor.execute(f\"\"\"\n                    INSERT INTO answer\n                    VALUES('{current_id}', '{current_time}', '0', '{question_id}', '{message}', '{image}');\n                    \"\"\")\n\n\n@database_common.connection_handler\ndef max_id_question_bd(cursor):\n    cursor.execute(\"\"\"SELECT MAX(id) FROM question\"\"\")\n    return cursor.fetchall()\n\n\n@database_common.connection_handler\ndef adding_new_applicant_bd(cursor, title, message, image):\n    current_id = max_id_question_bd()[0]['max'] + 1\n    current_time = datetime.now()\n    cursor.execute(f\"\"\"\n                    INSERT INTO question\n                    VALUES('{current_id}', '{current_time}', '0', '0', '{title}', '{message}', '{image}');\n                    \"\"\")\n\n\n@database_common.connection_handler\ndef delete_question_by_id_bd(cursor, question_id):\n    cursor.execute(f\"\"\"\n                        DELETE FROM question \n                        WHERE id = '{question_id}'\n                        \"\"\")\n\n\n@database_common.connection_handler\ndef update_question_by_id_bd(cursor, id, title, message, image):\n    current_time = datetime.now()\n    cursor.execute(f\"\"\"\n                        UPDATE question\n                        SET vote_number = '0', view_number = '0', title = '{title}', message = '{message}', submission_time = '{current_time}', image = '{image}'\n                        WHERE id = '{id}';\n                        \"\"\")\n\n\n@database_common.connection_handler\ndef delete_answer_by_id_bd(cursor, question_id, answer_id):\n    cursor.execute(f\"\"\"\n                        DELETE FROM answer \n                        WHERE id = '{answer_id}' and question_id = '{question_id}'\n                        \"\"\")
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/data_manager.py b/data_manager.py
--- a/data_manager.py	(revision c6f4abc32ad36b6a072c19e22bca125b7e7ff348)
+++ b/data_manager.py	(date 1638268489103)
@@ -1,35 +1,37 @@
-'''
-This is the layer between the server and the data.
-Functions here are called from server.py
-and use generic functions from connection.py.
-'''
 from datetime import datetime
 import database_common
 
 
-def sort_data(data, order_by, order_direction):
-    if order_direction == "Ascending":
-        reverse_for_sort = False
+@database_common.connection_handler
+def sort_data_bd(cursor, database_name, order_by, order_direction):
+    if order_direction == "Ascending" or order_direction == None:
+        order = 'ASC'
     elif order_direction == "Descending":
-        reverse_for_sort = True
-    elif order_direction == None:
-        reverse_for_sort = False
+        order = 'DESC'
 
-    if order_by == "Number of Votes":
-        data.sort(key=lambda x: int(x["vote_number"]), reverse=reverse_for_sort)
-    elif order_by == "Chronology" or order_by == 'Submission time':
-        data.sort(key=lambda x: datetime.strptime(x['submission_time'], '%Y-%m-%d %H:%M'), reverse=reverse_for_sort)
+    if order_by == "Number of Votes" or order_by == None:
+        category = "vote_number"
+    elif order_by == "Chronology" or 'Submission time':
+        category = 'submission_time'
     elif order_by == "Answer length":
-        data.sort(key=lambda x: len(x["message"]), reverse=reverse_for_sort)
+        category = "message"
     elif order_by == 'Title':
-        data.sort(key=lambda x: x["title"], reverse=reverse_for_sort)
+        category = "title"
     elif order_by == 'Message':
-        data.sort(key=lambda x: x["message"], reverse=reverse_for_sort)
+        category = "message"
     elif order_by == 'Number of Views':
-        data.sort(key=lambda x: x["view_number"], reverse=reverse_for_sort)
-    elif order_by == None:
-        data.sort(key=lambda x: int(x["vote_number"]), reverse=True)
-    return data
+        category = "view_number"
+
+    cursor.execute(f"""
+        DROP TABLE IF EXISTS temp_db;
+        SELECT * INTO temp_db FROM question;
+        ALTER TABLE temp_db DROP COLUMN image;
+        ALTER TABLE temp_db DROP COLUMN id;
+        SELECT * FROM temp_db
+        ORDER BY {category} {order};
+    """)
+    sorted_data = cursor.fetchall()
+    return sorted_data
 
 
 @database_common.connection_handler
Index: server.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Flask, request, render_template, redirect\nimport data_manager\nimport util\nfrom pathlib import Path\n\nUPLOAD_FOLDER = Path('static/images/')\n\napp = Flask(__name__)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n\n@app.route(\"/\")\n@app.route('/list', methods=['GET', 'POST'])\ndef main_page():\n    data = data_manager.get_question_bd()\n    for question in data:\n        question['submission_time'] = question['submission_time'].strftime(\"%d/%m/%Y %H:%M:%S\")\n    headers = ['submission time', 'number of views', 'number of votes', 'title', 'message']\n    if request.method == 'GET':\n        category = request.args.get('by_category')\n        order = request.args.get('by_order')\n        data_manager.sort_data(data, category, order)\n    return render_template('list_questions.html', data=data, headers=headers)\n\n\n@app.route('/question/<question_id>', methods=['GET', 'POST'])\ndef display_question_with_answers(question_id):\n    data_manager.get_question_by_id_bd(question_id)\n    answers_data_base = data_manager.get_answer_by_question_id_bd(question_id)\n    if request.method == 'GET':\n        category = request.args.get('by_category')\n        order = request.args.get('by_order')\n        data_manager.sort_data(answers_data_base, category, order)\n    if request.method == 'POST':\n        if request.form.get('vote_answer'):\n            id = request.form['vote_answer']\n            add = int(request.form['vote'])\n            data_manager.update_answer_by_vote_bd(id, add)\n        if request.form.get('vote_question'):\n            id = request.form['vote_question']\n            add = int(request.form['vote'])\n            data_manager.update_question_by_vote_bd(id, add)\n    question = data_manager.get_question_by_id_bd(question_id)[0]\n    question['submission_time'] = question['submission_time'].strftime(\"%d/%m/%Y %H:%M:%S\")\n    try:\n        image = question['image']\n    except:\n        image = None\n    for answer in answers_data_base:\n        answer['submission_time'] = answer['submission_time'].strftime(\"%d/%m/%Y %H:%M:%S\")\n    return render_template('display_a_question.html', question=question, image=image, answers_base=answers_data_base)\n\n\n@app.route('/question/<question_id>/new-answer', methods=['GET', 'POST'])\ndef add_answer(question_id):\n    question = data_manager.get_question_by_id_bd(question_id)[0]\n    if request.method == 'POST':\n        description = request.form['description']\n        file = request.files['file']\n        if file and util.allowed_file(file.filename):\n            file.save(UPLOAD_FOLDER / file.filename)\n        data_manager.adding_new_answer_bd(question_id, description, file.filename)\n        return redirect(f'/question/{question_id}')\n    elif request.method == 'GET':\n        return render_template('upload_answer.html', question_id=question['id'])\n\n\n@app.route('/add_question', methods=['POST', 'GET'])\ndef new_question():\n    if request.method == 'POST':\n        title = request.form['title']\n        description = request.form['description']\n        file = request.files['file']\n        if file and util.allowed_file(file.filename):\n            file.save(UPLOAD_FOLDER / file.filename)\n        data_manager.adding_new_applicant_bd(title, description, file.filename)\n        return redirect('/')\n    elif request.method == 'GET':\n        return render_template('upload_question.html')\n\n\n@app.route('/question/<question_id>/delete', methods=['POST', 'GET'])\ndef delete_question(question_id):\n    if request.method == 'POST':\n        data_manager.delete_question_by_id_bd(question_id)\n        return render_template('delete_question.html')\n    elif request.method == 'GET':\n        return redirect('/')\n\n\n@app.route('/question/<question_id>/<answer_id>/delete', methods=['GET', 'POST'])\ndef delete_answer(question_id, answer_id):\n    if request.method == 'POST':\n        data_manager.delete_answer_by_id_bd(question_id, answer_id)\n        return render_template('delete_answer.html')\n\n\n@app.route('/question/<question_id>/edit_page', methods=['GET', 'POST'])\ndef edit_question(question_id):\n    if request.method == 'POST':\n        new_title = request.form['title']\n        new_question = request.form['message']\n        file = request.files['file']\n        if file and util.allowed_file(file.filename):\n            file.save(UPLOAD_FOLDER / file.filename)\n        data_manager.update_question_by_id_bd(question_id, new_title, new_question, file.filename)\n        return redirect(f'/question/{question_id}')\n    elif request.method == 'GET':\n        edited_question = data_manager.get_question_by_id_bd(question_id)[0]\n        edited_question['submission_time'] = edited_question['submission_time'].strftime(\"%d/%m/%Y %H:%M:%S\")\n        return render_template('edit_question.html', question=edited_question)\n\nif __name__ == \"__main__\":\n    app.run(\n        host='0.0.0.0',\n        port=8000,\n        debug=True,\n    )\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server.py b/server.py
--- a/server.py	(revision c6f4abc32ad36b6a072c19e22bca125b7e7ff348)
+++ b/server.py	(date 1638263256610)
@@ -19,7 +19,7 @@
     if request.method == 'GET':
         category = request.args.get('by_category')
         order = request.args.get('by_order')
-        data_manager.sort_data(data, category, order)
+        data_manager.sort_data_bd('question', category, order)
     return render_template('list_questions.html', data=data, headers=headers)
 
 
@@ -30,7 +30,7 @@
     if request.method == 'GET':
         category = request.args.get('by_category')
         order = request.args.get('by_order')
-        data_manager.sort_data(answers_data_base, category, order)
+        data_manager.sort_data_bd('answer', category, order)
     if request.method == 'POST':
         if request.form.get('vote_answer'):
             id = request.form['vote_answer']
